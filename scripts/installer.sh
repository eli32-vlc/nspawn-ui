#!/usr/bin/env bash
set -euo pipefail

# CT Manager Installer (Debian/Ubuntu)
# - Installs dependencies
# - Sets up bridge br0 (IPv4 DHCP + NAT w/ nftables by default)
# - Optional IPv6 RA prefix
# - Deploys API backend + WebUI
# - Installs systemd services (API + nft apply)
# - Prepares hooks for 6in4, WireGuard, ndppd

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
API_DIR="$ROOT_DIR/api"
WEB_DIR="$ROOT_DIR/web"
SYSTEMD_DIR="$ROOT_DIR/systemd"

APP_DIR="/opt/ctmgr"
APP_API_DIR="$APP_DIR/api"
APP_WEB_DIR="$APP_DIR/web"
STATE_DIR="$APP_DIR/state"
CONFIG_JSON="$APP_DIR/config.json"
SERVICE_NAME="ctmgr-api.service"

require_root() {
  if [[ $EUID -ne 0 ]]; then echo "Please run as root."; exit 1; fi
}

detect_wan_iface() {
  ip route show default 2>/dev/null | awk '/default/ {print $5; exit}'
}

install_packages() {
  echo "[*] Installing dependencies..."
  export DEBIAN_FRONTEND=noninteractive
  apt-get update
  apt-get install -y \
    systemd-container debootstrap \
    python3 python3-venv python3-pip \
    iproute2 iptables nftables \
    systemd-networkd \
    curl jq
}

setup_dirs() {
  echo "[*] Creating app directories..."
  mkdir -p "$APP_API_DIR" "$APP_WEB_DIR" "$STATE_DIR"
  install -m 0644 "$API_DIR/main.py" "$APP_API_DIR/main.py"
  install -m 0644 "$WEB_DIR/index.html" "$APP_WEB_DIR/index.html"
  # config defaults
  if [[ ! -f "$CONFIG_JSON" ]]; then
    cat >"$CONFIG_JSON" <<EOF
{
  "bridge": "br0",
  "lan4_cidr": "192.168.100.0/24",
  "lan4_gw": "192.168.100.1",
  "wan_iface": "",
  "ipv6_prefix": "",
  "nat_backend": "nftables",
  "enable_ndppd": false,
  "ndppd_iface": ""
}
EOF
  fi
}

setup_python() {
  echo "[*] Setting up Python venv..."
  python3 -m venv "$APP_DIR/venv"
  "$APP_DIR/venv/bin/pip" install --upgrade pip
  "$APP_DIR/venv/bin/pip" install fastapi uvicorn[standard] pydantic
}

install_service() {
  echo "[*] Installing systemd service..."
  install -m 0644 "$SYSTEMD_DIR/$SERVICE_NAME" "/etc/systemd/system/$SERVICE_NAME"
  systemctl daemon-reload
  systemctl enable "$SERVICE_NAME"
  systemctl restart "$SERVICE_NAME"
  systemctl status "$SERVICE_NAME" --no-pager --full || true
}

enable_ip_forwarding() {
  echo "[*] Enabling IP forwarding..."
  sysctl -w net.ipv4.ip_forward=1
  sysctl -w net.ipv6.conf.all.forwarding=1
  mkdir -p /etc/sysctl.d
  cat >/etc/sysctl.d/99-ctmgr-forwarding.conf <<EOF
net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1
EOF
}

setup_bridge_networkd() {
  echo "[*] Configuring systemd-networkd bridge br0 + IPv4 DHCP..."
  mkdir -p /etc/systemd/network

  cat >/etc/systemd/network/10-br0.netdev <<'EOF'
[NetDev]
Name=br0
Kind=bridge
EOF

  cat >/etc/systemd/network/10-br0.network <<'EOF'
[Match]
Name=br0

[Network]
Address=192.168.100.1/24
DHCPServer=yes
IPv6SendRA=no

[DHCPServer]
PoolOffset=10
PoolSize=100
EmitDNS=yes
DNS=1.1.1.1
EOF

  cat >/etc/systemd/network/99-ve.network <<'EOF'
[Match]
Name=ve-*

[Network]
Bridge=br0
EOF

  systemctl enable systemd-networkd
  systemctl restart systemd-networkd
  sleep 1
  networkctl status br0 || true
}

setup_nft_rules() {
  echo "[*] Installing nftables apply unit and base rules..."
  mkdir -p /etc/nftables.d
  cat >/etc/systemd/system/ctmgr-nft-apply.service <<'EOF'
[Unit]
Description=Apply CT Manager nftables rules
After=network-online.target nftables.service
Wants=network-online.target nftables.service

[Service]
Type=oneshot
ExecStart=/usr/sbin/nft -f /etc/nftables.d/ctmgr.nft
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
  # Minimal baseline rules; API will render and update this file
  cat >/etc/nftables.d/ctmgr.nft <<'EOF'
# Placeholder; will be generated by API
EOF
  systemctl daemon-reload
  systemctl enable --now ctmgr-nft-apply.service
}

setup_ipv4_nat_fallback_iptables() {
  # Keep iptables NAT unit as fallback (disabled by default)
  local wan_if="$1"
  cat >/etc/systemd/system/ctmgr-nat.service <<EOF
[Unit]
Description=CT Manager NAT setup (iptables fallback)
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/sbin/iptables -t nat -C POSTROUTING -s 192.168.100.0/24 -o $wan_if -j MASQUERADE || /usr/sbin/iptables -t nat -A POSTROUTING -s 192.168.100.0/24 -o $wan_if -j MASQUERADE
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
  systemctl daemon-reload
  systemctl disable --now ctmgr-nat.service || true
}

prompt_ipv6_setup() {
  echo
  echo "IPv6 options:"
  echo "  1) Set native prefix now"
  echo "  2) Skip (configure later via API/UI)"
  read -rp "Select [1-2]: " opt
  case "$opt" in
    1)
      read -rp "Enter IPv6 prefix for br0 (e.g., 2001:db8:abcd:100::/64): " v6prefix
      if [[ -n "$v6prefix" ]]; then
        sed -i 's/^IPv6SendRA.*/IPv6SendRA=yes/' /etc/systemd/network/10-br0.network || true
        if ! grep -q "^\[IPv6Prefix\]" /etc/systemd/network/10-br0.network; then
          cat >>/etc/systemd/network/10-br0.network <<EOF

[IPv6Prefix]
Prefix=$v6prefix
EOF
        else
          sed -i "s|^Prefix=.*|Prefix=$v6prefix|" /etc/systemd/network/10-br0.network
        fi
        systemctl restart systemd-networkd
        jq --arg p "$v6prefix" '.ipv6_prefix=$p' "$CONFIG_JSON" | sponge "$CONFIG_JSON" 2>/dev/null || \
          python3 - <<PY || true
import json; p="$v6prefix"; f="$CONFIG_JSON"; d=json.load(open(f)); d["ipv6_prefix"]=p; json.dump(d, open(f,"w"), indent=2)
PY
      fi
      ;;
    *) ;;
  esac
}

main() {
  require_root
  echo "== CT Manager Installer =="

  install_packages
  setup_dirs
  setup_python
  setup_bridge_networkd
  enable_ip_forwarding

  WAN_IF="$(detect_wan_iface || true)"
  echo "[*] Detected WAN interface: ${WAN_IF:-<none>}"
  setup_nft_rules
  setup_ipv4_nat_fallback_iptables "${WAN_IF:-eth0}"

  install_service
  prompt_ipv6_setup

  echo
  echo "Done."
  echo "Web UI: http://$(hostname -I | awk '{print $1}'):8080/ui/"
  echo "API:    http://<host>:8080/"
  echo
  echo "Notes:"
  echo "- Default NAT backend: nftables. You can switch to iptables via the UI."
  echo "- Configure 6in4/WireGuard and IPv6 ACLs in the Network tab."
  echo "- Use per-CT network controls to set static IPv4/IPv6 and bridge."
}

# Helpers: sponge fallback
if ! command -v sponge >/dev/null 2>&1; then
  install -m 0755 /dev/stdin /usr/local/bin/sponge <<'EOSP'
#!/usr/bin/env bash
# minimal sponge replacement
tmp="$(mktemp)"; cat >"$tmp"; cat "$tmp" >"$1"; rm -f "$tmp"
EOSP
fi

main "$@"
